void package_management();
void Order_management();
void messages();
Packege add_package_to_db();
string get_destination();
float get_price();
int get_number_of_passengers();
void print_all_packages();

void package_management()
{
	int choice;
	do
	{
		cout <<
			"[1] add new package" "\n"
			"[2] edit package" "\n";
		cout << "Enter ur choise:";
		cin >> choice;
		switch (choice)
		{
		case 1:
			add_package_to_db();
			break;
		case 2:
			Order_management();
			break;
		case 3:
			messages();
			break;
		case 4:
			home_page();
			break;
		case 5:
			exit(0);
			break;
		}
	} while (true);
}

//############################################################START OF CASE 1 : ADD NEW PACKAGE TO DB ##########################################
Packege add_package_to_db()
{
	Package New;
	Data start_of_package, end_of_package;

	string destination;
	float price;
	int day, month, year, number_of_passengers;

	start_of_package = get_start_date_of_package();
	end_of_package = get_end_date_of_package();

	destination = get_destination();
	const char* p_destination = destination.c_str();

	price = get_price();
	number_of_passengers = get_number_of_passengers();



	New=creatNewPackege(p_destination,  price,  start_of_package,  end_of_package,  number_of_passengers);
	
	if (setPackegeToDB(New))
	{
		cout << "package added successfully" "\n";
	}
	else
		cout << "Failed to add package, contact your administrator " "\n";

	print_all_packages();
	

	
}

Data get_start_date_of_package()
{
	Data start;
	int day, month, year;
	cout << "Enter start date of package:dd/mm/yyyy:";
	cin >> day >> month >> year;
	start=getNewDate(day, month, year);
	return start;

}

Data get_end_date_of_package()
{
	Data end;
	int day, month, year;
	cout << "Enter start date of package:dd/mm/yyyy:";
	cin >> day >> month >> year;
	end = getNewDate(day, month, year);
	return end;
}

string get_destination()
{
	bool check_if_re_enter;
	string destination;
	cout >> "Enter destination :";
	while (destination.size() >= 100)
	{
		cout >> "destination name must be up to 100 characters, press 0 to exit and move to agent menu or 1 to re-enter destination name: ";
		cin >> check_if_re_enter;
		if (check_if_re_enter)
		{
			cout >> "enter destination name: ";
			cin >> destination;

		}
		else
			agent_menu();

	}
	return destination;
}

float get_price()
{
	bool check_if_price_below_equal_0;
	float price;
	cout >> "Enter price :";
	while (price <=0)
	{
		cout >> "price can't be below\equal to 0, press 0 to exit and move to agent menu or 1 to re-enter price : ";
		cin>>check_if_price_below_equal_0;
		if (check_if_price_below_equal_0)
		{
			cout >> "enter new price: ";
			cin >> price;

		}
		else
			agent_menu();

	}
	return price;
}

int get_number_of_passengers()
{
	bool check_if_passengers_below_equal_0;
	int get_number_of_passengers;
	cout >> "how many people are you :";
	cin >> get_number_of_passengers;
	while (get_number_of_passengers <= 0)
	{
		cout >> "number of passengers can't be below\equal to 0, press 0 to exit and move to agent menu or 1 to re-enter price : ";
		cin >> check_if_passengers_below_equal_0;
		;
		if (check_if_passengers_below_equal_0;)
		{
			cout >> "how many people are you :";
			cin >> get_number_of_passengers;

		}
		else
			agent_menu();

	}
	return get_number_of_passengers;
}

void print_all_packages()  //////////////////////
{
	int size_of_db_all_package;
	Package* all_packages;
	all_packages = getAllPackeges();
	size_of_db_all_package = PackegesfileSize();


}






void Order_management()
{

}
void messages()
{

}


void Order_management();
void messages();
Packege add_package_to_db();
string get_destination();
float get_price();
int get_number_of_passengers();
void print_all_packages();
void edit_package();

///// STATMENT OF ADD NEW PACKAGE FUNCTION
void package_management();

Date get_start_date_of_package();
Date get_end_date_of_package();

///// STATMENT OF ALL UPDATE FUNCTION
void edit_by_price();
void edit_by_arrive_date();
void edit_by_leave_date();
int get_serial_number();
void edit_by_arrive_date();


///// STATMENT OF ALL OREDER MENGMENT FUNCTION
void Approve_cancel_order();
void Approve_order();
void Cancel_order();



//############################################################package_management : ADD NEW PACKAGE TO DB ##########################################
      //////main of function////////////
void package_management()
{
	int choice;
	do
	{
		cout <<
			"[1] add new package" "\n"
			"[2] edit package" "\n"
			"[3] back to agent menu" "\n";
		cout << "Enter ur choise:";
		cin >> choice;
		switch (choice)
		{
		case 1:
			add_package_to_db();
			break;
		case 2:
			edit_package();
			break;
		case 3:
			agent_menu()();
			break;
		}
	} while (true);
}

Packege add_package_to_db()
{
	Package New;
	Data start_of_package, end_of_package;

	string destination;
	float price;
	int day, month, year, number_of_passengers;

	start_of_package = get_start_date_of_package();
	end_of_package = get_end_date_of_package();

	destination = get_destination();
	const char* p_destination = destination.c_str();

	price = get_price();
	number_of_passengers = get_number_of_passengers();



	New=creatNewPackege(p_destination,  price,  start_of_package,  end_of_package,  number_of_passengers);
	
	if (setPackegeToDB(New))
	{
		cout << "package added successfully" "\n";
	}
	else
		cout << "Failed to add package, contact your administrator " "\n";

	print_all_packages();
	

	
}

Data get_start_date_of_package()
{
	Data start;
	int day, month, year;
	cout << "Enter start date of package:dd/mm/yyyy:";
	cin >> day >> month >> year;
	start=getNewDate(day, month, year);
	return start;

}

Data get_end_date_of_package()
{
	Data end;
	int day, month, year;
	cout << "Enter start date of package:dd/mm/yyyy:";
	cin >> day >> month >> year;
	end = getNewDate(day, month, year);
	return end;
}

string get_destination()
{
	bool check_if_re_enter;
	string destination;
	cout >> "Enter destination :";
	while (destination.size() >= 100)
	{
		cout >> "destination name must be up to 100 characters, press 0 to exit and move to agent menu or 1 to re-enter destination name: ";
		cin >> check_if_re_enter;
		if (check_if_re_enter)
		{
			cout >> "enter destination name: ";
			cin >> destination;

		}
		else
			agent_menu();

	}
	return destination;
}

float get_price()
{
	bool check_if_price_below_equal_0;
	float price;
	cout >> "Enter price :";
	while (price <=0)
	{
		cout >> "price can't be below\equal to 0, press 0 to exit and move to agent menu or 1 to re-enter price : ";
		cin>>check_if_price_below_equal_0;
		if (check_if_price_below_equal_0)
		{
			cout >> "enter new price: ";
			cin >> price;

		}
		else
			agent_menu();

	}
	return price;
}

int get_number_of_passengers()
{
	bool check_if_passengers_below_equal_0;
	int get_number_of_passengers;
	cout >> "how many people are you :";
	cin >> get_number_of_passengers;
	while (get_number_of_passengers <= 0)
	{
		cout >> "number of passengers can't be below\equal to 0, press 0 to exit and move to agent menu or 1 to re-enter price : ";
		cin >> check_if_passengers_below_equal_0;
		;
		if (check_if_passengers_below_equal_0)
		{
			cout >> "how many people are you :";
			cin >> get_number_of_passengers;

		}
		else
			agent_menu();

	}
	return get_number_of_passengers;
}

void print_all_packages()  //////////////////////מה אני אמור להדפיס לו כאן????????????
{
	int size_of_db_all_package;
	Package* all_packages;
	all_packages = getAllPackeges();
	size_of_db_all_package = PackegesfileSize();
	for (int i = 0; i < size_of_db_all_package;++i)
	{
		printPackege(all_packages[i]);
	}
}



//############################################################package_management :  EDIT PACKAGE TO DB ##########################################

void edit_package()
{
		int choice;
		do
		{
			cout <<
				"[1] edit by price" "\n"
				"[2] edit by arrive date" "\n"
				"[3] edit by leave date" "\n"
				"[4] back to agent menu" "\n";
			cout << "Enter ur choise:";
			cin >> choice;
			switch (choice)
			{
			case 1:
				edit_by_price();
				break;
			case 2:
				edit_by_arrive_date();
				break;
			case 3:
				edit_by_leave_date();
				break;
			case 4:
				agent_menu()();
				break;
			}
		} while (true);
}

void edit_by_price()
{
	int serial_number;
	float new_price;
	print_all_packages();
	new_price=get_price();
	serial_number = get_serial_number();
	if ( UpdatePackegePrice(new_price, serial_number) )
		cout << "price has updated succesfiyl""\n";
	else
		cout << "price has updated failed""\n";
	edit_package();

}

int get_serial_number() 
{
	print_all_packages();
	int serial_number;
	cout << "enter serial number of package that u want to edit:";
	cin >> serial_number;
	if (searchPackegeBySerialNumber(serial_number) != -1 && searchPackegeBySerialNumber(serial_number) != -2)
	{
		return serial_number;
	}
	return -1;
}

void edit_by_arrive_date()
{
	Date arrival_date;
	int serial_number;
	serial_number = get_serial_number();
	arrival_date = get_start_date_of_package();
	if( UpdatePackegeArrivalDate(arrival_date, serial_number) )
		cout << "arrive date has updated succesfiyl""\n";
	else
		cout << "arrive date has updated failed""\n";

	edit_package();

}

void edit_by_leave_date()
{
	Date leave_date;
	int serial_number;
	serial_number = get_serial_number();
	leave_date = get_end_date_of_package();
	if (UpdatePackegeLeavingDate(leave_date, serial_number))
		cout << "leave date has updated succesfiyl""\n";
	else
		cout << "leave date has updated failed""\n";

	edit_package();
}

//############################################################Order_management  ##########################################


void Order_management()
{

	int choice;
	do
	{
		cout <<
			"[1] Approve/cancel order" "\n"
			"[2] back to agent menu" "\n";
			
		cout << "Enter ur choise:";
		cin >> choice;
		switch (choice)
		{
		case 1:
			Approve_cancel_order();
			break;
		case 2:
			agent_menu();
			break;
		}
	} while (true);
}

void Approve_cancel_order()
{
	int choice;
	do
	{
		cout <<
			"[1] Approve order" "\n"
			"[2] Cancel order" "\n";

		cout << "Enter ur choise:";
		cin >> choice;
		switch (choice)
		{
		case 1:
			Approve_order();
			break;
		case 2:
			Cancel_order();
			break;
		}
	} while (true);

}

void Approve_order()
{
	PrintAllPackagesAwaitingApproval();
	cout << "enter serial number of package that u want to approve:";
	cin >> serial_number;
	if (UpdatePackegeStatus(2, serial_number))
		cout << "Updated to approve successfully""\n";
	else
		cout << "Updated to approve failed ""\n";
	Order_management();
}

void Cancel_order()
{


	PrintAllPackagesAwaitingApproval();
	cout << "enter serial number of package that u want to approve:";
	cin >> serial_number;
	if (UpdatePackegeStatus(3, serial_number))
		cout << "Updated to cancel successfully""\n";
	else
		cout << "Updated to cancel failed ""\n";
	Order_management();
}


//############################################################    MESSAGES  ##########################################


void messages()
{

}



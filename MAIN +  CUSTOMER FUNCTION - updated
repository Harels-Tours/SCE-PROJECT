
//#include<stdio.h> 
//#include<string.h>
//#include<iostream>
#include "DB_new.cpp"
#include <regex>

using namespace std;

#include <fstream>
#include <iostream>
#include <limits>
#include <string>
#include <string.h>
#include <regex>
#include <stdio.h>
using namespace std;

template <typename T>
static T get_input(const std::string& strQuery);
static std::string get_username();
static std::string get_password();
static std::string get_mail();
static void login_as_client();
static void login_after_chose_login_as_client();
//static void login_as_agent();
static void register_user();
static bool Check_if_user_name_exists(string user_name);
static void main_menu();
static void client_menu(string username);
//static void agent_menu(string username);  /////////////// need to send user name ?????????


static bool Email_check(string email);

static void home_page();






int size_after_filter = PackegesfileSize();

//המספר סידורי נכנס למקום הראשון במערך של הלקוח וכל השאר זזים מקום אחד קדימה כמו בתור
static void AddToWishList(Client customer, int serialNumber)
{
	for(int i = 19; i < 0; i++)
	{
		customer.wish_list[i] = customer.wish_list[i - 1];
	}
	customer.wish_list[0] = serialNumber;
}

static void Print_vacations(Packege  vacations)
{
	printPackege(vacations);
}

static void Print_all_vacations(Packege* vacations, int size)
{
	for (int i = 0; i < size; i++)
	{
		printPackege(vacations[i]);
	}
}

//  Find customer from DB by user name
static Client Find_customer(string user_name)
{
	Client* customer = getAllClients();
	int size = ClientsfileSize();
	Client temp;
	for (int i = 0; i < size; i++)
	{
		if (customer[i].user_name == user_name)
		return customer[i];
	}
	std::cout <<"The user name not found " << endl;

}
//  Find customer from DB by user name and return pointer to him(בשביל הפונקציה של ההודעות)

static Client* Find_customer2(string user_name)
{
	Client* customer = getAllClients();
	int size = ClientsfileSize();
	Client temp;
	for (int i = 0; i < size; i++)
	{
		if (customer[i].user_name == user_name)
		return &customer[i];
	}
	std::cout << "The user name not found " << endl;

}

static int Length_of_card(int y)
{
	int count = 0;
	while (y)
	{
		count++;
		y /= 10;

	}
	return count;
}

static bool check_date(Date date1, Date date2)
{
	if (date1.day == date2.day && date1.month == date2.month && date1.year == date2.year)
		return true;
	return false;
}

static void PrintWishList(Client customer)
{
	bool check = false;
	int choise, serial_number;
	Packege* vacations = getAllPackeges();
	int size = PackegesfileSize();
	for (int i = 0; i < 20; i++)
	{
		if (customer.wish_list[i] != 0)
		{
			for (int j = 0; j < size; j++)
			{
				if (vacations[j].serial_number == customer.wish_list[i])
					Print_vacations(vacations[j]);
			}
		}
	}
}

// copy constructor for date
static void Copy_date(Date* sourse, Date* target)
{
	target->day = sourse->day;
	target->month = sourse->month;
	target->year = sourse->year;
}
// copy constructor for vacation

static void Copy_vacations(Packege* sourse, Packege* target)
{
	target->number_of_passengers = sourse->number_of_passengers;
	Copy_date(&(sourse->start),&( target->start));
	Copy_date(&(sourse->end), &(target->end));
	for (int i = 0; i < 100; i++)
		target->destination[i] = sourse->destination[i]; 
	target->price = sourse->price;
	target->serial_number = sourse->serial_number;
	for (int i = 0; i < 20; i++)
		target->status[i] = sourse->status[i];
}

// sort by date
static Packege* Sort_by_date(Packege* vacations, int size)
{
	Packege* sort_by_date = new Packege[size];
	for (int i = 0; i < size; i++)
	{
		//sort_by_date[i] = new Vacation[1];
		Copy_vacations(&(vacations[i]), &(sort_by_date[i]));
	}
	int i, j;
	Packege temp;
	for (i = 1; i < size; i++)
	{
		Copy_vacations(&(sort_by_date[i]), &(temp));
		j = i - 1;
		while (j >= 0 && ((sort_by_date[j].start.year > temp.start.year) || ((sort_by_date[j].start.year == temp.start.year) && (sort_by_date[j].start.month > temp.start.month)) || ((sort_by_date[j].start.year == temp.start.year) && (sort_by_date[j].start.month == temp.start.month) && sort_by_date[j].start.day > temp.start.day)))
		{
			Copy_vacations(&(sort_by_date[j]), &(sort_by_date[j + 1]));
			j = j - 1;
		}
		Copy_vacations(&(temp), &(sort_by_date[j + 1]));
	}
	return sort_by_date;
}

//Sort by price
static Packege* Sort_by_price(Packege* vacations, int size)
{
	Packege* sort_by_price = new Packege[size];
	for (int i = 0; i < size; i++)
	{
		//sort_by_price[i] = new Vacation[1];
		Copy_vacations(&(vacations[i]), &(sort_by_price[i]));
	}
	int i, j;
	Packege temp;
	for (i = 1; i < size; i++)
	{
		Copy_vacations(&(sort_by_price[i]), &(temp));
		j = i - 1;
		while (j >= 0 && sort_by_price[j].price > temp.price)
		{
			Copy_vacations(&(sort_by_price[j]), &(sort_by_price[j + 1]));
			j = j - 1;
		}
		Copy_vacations(&(temp), &(sort_by_price[j + 1]));
	}
	return sort_by_price;
}

static bool Payment(int x)
{
	Packege* vacation = getAllPackeges();
	int index_where_the_pacakge_is = searchPackegeBySerialNumber(x);
	int price, id, card, cvc, Expire_date;
	string full_name;
	bool choise = true;
	if (index_where_the_pacakge_is == -1)
		std:: cout << "Error , package is'nt exist" << endl;
	else
	{
		price = vacation[index_where_the_pacakge_is].price;
		std::cout << "The price to pay is:" << price << endl;
		std::cout << "Please enter your full name" << endl;
		std::cin >> full_name;
		std::cout << "Please enter your ID" << endl;
		std::cin >> id;
		while (choise)
		{
			std::cout << "Please enter the debit card number" << endl;
			std::cin >> card;
			std::cout << "Enter the expiration date of a card enter- 4 number 2 for month then 2 for year" << endl;
			std::cin >> Expire_date;
			std::cout << "Insert the last 3 digits on the back of the card" << endl;
			std::cin >> cvc;
			if (Length_of_card(card) == 9) {
				std::cout << "The card is charged" << endl;
				return true;
			}
			else
			{
				std::cout << "Invalid card" << endl;
				std::cout << "if u want to try again Press 1-for yes or 0-for no:";
				std::cin >> choise;
			}
			if (choise == 0)
				return false;
		}
	}
}

static void Order_status(string user_name)
{
	Client customer = Find_customer(user_name);// לבדוק מה קורה אם חוזר 0 זה בעיה
	int choise = 0;
	int size = PackegesfileSize();
	Packege* vacations = getAllPackeges();
	int size_vacation = customer.vacations_list_size;
	for (int i = 0; i < size_vacation; i++)
	{
		for (int j = 0; j < size_vacation; j++)
		{
			if (vacations[j].serial_number == customer.vacations_list[i])
			{
				if (vacations[j].status == "in_process")
					std::cout << "Pending approuv " << endl;
				Print_vacations(vacations[j]);
				std::cout << "If you want to cancel the order press 1 " << endl;
				std::cin >> choise;
				if (choise == 1)
				{
					UpdatePackegeStatus(3, vacations[j].serial_number);
					std::cout << "Order Number: " << customer.vacations_list[i] << " Canceled " << endl;
				}
			}

		}

	}
	return;
}

static void Order_vacation(int Serial_number)
{
	char* user_name = new char[15];
	char* name = new char[10];
	char* last_name = new char[10];
	bool check2 = false;
	int choise, phone, temp, x = 1;
	bool check, check3;
	Packege* vacations = getAllPackeges();
	int size = PackegesfileSize();
	for (int i = 0; i < size; i++)
	{
		if (vacations[i].serial_number == Serial_number)
		{

			check = true;
			std::cout << "To order now press 1/n To Back Press 2 " << endl;
			std::cin >> choise;
			while (choise > 2 || choise < 1)
			{
				std::cout << "Wrong choice Please try again" << endl;
				std::cin >> choise;
			}
			if (choise == 1)
			{
				std::cout << "Enter a username" << endl;
				std::cin >> user_name;
				std::cout << "Enter a name" << endl;
				std::cin >> name;
				std::cout << "Enter a last name" << endl;
				std::cin >> last_name;
				std::cout << "Enter a phone number" << endl;
				std::cin >> phone;
				//בדיקת תקינות מס טלפון
				while (x != 10)
				{
					x = 1;
					temp = phone;
					while (temp != 0)
					{
						temp = temp / 10;
						x++;
					}
					if (x != 10)
					{
						std::cout << "Incorrect phone number try again " << endl;
						std::cin >> phone;
					}
				}
				check3 = UpdateClientsOrderDetails(user_name, name, last_name, phone);
				if (!check3)
				{
					std::cout << "The system was unable to update the package information" << endl;
					//agent_menu();
				}
				else
				{
					check = Payment(Serial_number);
					if (check)
					{
						std::string username(user_name);
						UpdatePackegeStatus(2, Serial_number);
						Order_status(username);
						//Find_vacation();

					}
					else
					{
						UpdatePackegeStatus(3,Serial_number);
						std::cout << "Payment canceled " << endl;
						return;
					}
				}
			}
			if (choise == 2)
				return;
		}
	}
	if (!check2)
		std::cout << "Serial number not exist " << endl;
	return;
}

//return size of vacations by location
static int Get_size_vacations_by_location(Packege* vacations, string location)
{
	
	int counter = 0;
	for (int i = 0; i < size_after_filter; i++)
	{
		if (vacations[i].destination == location)
			counter++;
	}
	size_after_filter = counter;
	return size_after_filter;
}

//filter by destenation
static Packege* Get_vactions_by_location(Packege* vacation, string location)
{
	int size1 = size_after_filter;
	Packege temp;
	Packege* vacations = vacation;
	int counter = Get_size_vacations_by_location(vacations, location);
	int size = counter;
	Packege* new_vacations = new Packege[counter];
	counter = 0;
	for (int i = 0; i < size1; i++)
	{
		if (vacations[i].destination == location)
		{
			//new_vacations[i] = new Vacation[1];
			Copy_vacations(&(vacations[i]), &(new_vacations[counter]));
			counter++;
		}
	}

	return new_vacations;
}


//return size of vacations by passenger amount
static int Get_size_vacations_by_amount(Packege* vacations, int amount)
{
	int counter = 0;
	for (int i = 0; i < size_after_filter; i++)
	{
		if (vacations[i].number_of_passengers == amount)
			counter++;
	}
	size_after_filter = counter;
	return size_after_filter;
}

//filter by  passenger amount
static Packege* Get_vactions_by_passenger_amount(Packege* vacation, int amount)
{
	int size1 = size_after_filter;
	Packege temp;
	Packege* vacations = vacation;
	int counter = Get_size_vacations_by_amount(vacations, amount);
	int size = counter;
	Packege* new_vacations = new Packege[counter];
	counter = 0;
	for (int i = 0; i < size1; i++)
	{
		if (vacations[i].number_of_passengers == amount)
		{
			//new_vacations = new Vacation[1];
			Copy_vacations(&(vacations[i]), &(new_vacations[counter]));
			counter++;
		}
	}

	return new_vacations;
}


//return size of vacations by date
static int Get_size_vacations_by_date(Packege* vacations, Date check_in, Date check_out)
{
	int counter = 0;
	for (int i = 0; i < size_after_filter; i++)
	{
		if (vacations[i].start.day == check_in.day && vacations[i].start.month == check_in.month && vacations[i].start.year == check_in.year)
		{
			if (vacations[i].end.day == check_out.day && vacations[i].end.month == check_out.month && vacations[i].end.year == check_out.year)
				counter++;
		}
	}
	size_after_filter = counter;
	return size_after_filter;
}

//filter by date
static Packege* Get_vactions_by_date(Packege* vacation, Date check_in, Date check_out)
{
	int size1 = size_after_filter;
	Packege temp;
	Packege* vacations = vacation;
	int counter = Get_size_vacations_by_date(vacations, check_in, check_out);
	int size = counter;
	Packege* new_vacations = new Packege[counter];
	counter = 0;
	for (int i = 0; i < size1; i++)
	{
		if (check_date(vacation[i].start, check_in) && check_date(vacation[i].end, check_out))
		{
			//new_vacations = new Vacation[1];
			Copy_vacations(&(vacation[i]), &(new_vacations[counter]));
			counter++;
		}
	}
	return new_vacations;
}

static void Package_filtering()
{
	Client customer;
	int Serial_number_selected;
	int choise;
	Date check_in, check_out;
	string destination, user_name;
	int  passenger_amount, check, back, check2;
	int size = PackegesfileSize();
	Packege* vacations = getAllPackeges();
	std::cout << "Please enter a destination or select 0 to continue" << endl;
	std::cin >> destination;
	std::cout << "Please enter a passenger amount or select 0 to continue" << endl;
	std::cin >> passenger_amount;
	std::cout << "If you want to enter check-in and check-out select 1 or select 0 to continue" << endl;
	std::cin >> check2;
	if (destination != "0")
		vacations = Get_vactions_by_location(vacations, destination);
	if (passenger_amount != 0)
		vacations = Get_vactions_by_passenger_amount(vacations, passenger_amount);
	if (check2 == 1)
	{
		std::cout << "enter check in : day: \n month:\n year: \n" << endl;
		std::cin >> check_in.day >> check_in.month >> check_in.year;
		std::cout << "enter check out :\n day: \n month:\n year: \n" << endl;
		std::cin >> check_out.day >> check_out.month >> check_out.year;
		vacations = Get_vactions_by_date(vacations, check_in, check_out);
	}
	std::cout << "If you want to back to menu  select 1" << endl;
	std::cin >> check;
	if (check == 1)
		//agent_menu();
		std::cout << "If you want to sort by date, select 1" << endl;
	std::cout << "If you want to sort by price, select 2" << endl;
	std::cout << "If you want to sort by price and by date, select 3" << endl;
	std::cout << "If you  dont want to sort , select 0" << endl;
	std::cout << "If you want to just add to wish list, select 4" << endl;
	std::cin >> check;
	while (check > 4 || check < 0)
	{
		std::cout << "Wrong choice Please try again" << endl;
		std::cin >> check;
	}
	if (vacations == NULL)
	{
		std::cout << "No suitable package was found" << endl;
		Package_filtering();
	}
	if (check == 1)
		Print_all_vacations(Sort_by_date(vacations, size_after_filter), size_after_filter);
	if (check == 2)
		Print_all_vacations(Sort_by_price(vacations, size_after_filter), size_after_filter);
	if (check == 3)
		Print_all_vacations(Sort_by_date(Sort_by_price(vacations, size_after_filter), size_after_filter), size_after_filter);
	if (check == 0)
		Print_all_vacations(vacations, size_after_filter);
	std::cout << "Enter the package number you selected" << endl;
	std::cin >> Serial_number_selected;
	check2 = searchPackegeBySerialNumber(Serial_number_selected);
	while (check2 == -1)
	{
		std::cout << "Wrong choice Please try again" << endl;
		std::cin >> Serial_number_selected;
		check2 = searchPackegeBySerialNumber(Serial_number_selected);
	}
	if (check == 4)
	{
		std::cout << "enter user name" << endl;
		std::cin >> user_name;
		customer = Find_customer(user_name);// לבדוק מה קורה אם חוזר 0 זה בעיה
		AddToWishList(customer, Serial_number_selected);
	}
	else
	{
		UpdatePackegeStatus(1,Serial_number_selected);
		Order_vacation(Serial_number_selected);
	}
}

static void Find_vacation()
{
	Client customer;
	string user_name;
	int choise, Serial_number_selected, check, check2 = -1;
	std::cout << "Please select an option:" << endl;
	std::cout << "To view existing packages, select - 1" << endl;
	std::cout << "To filter packages, select - 2" << endl;
	std::cout << "for back select - 3" << endl;
	std::cin >> choise;
	while (choise > 3 || choise < 1)
	{
		std::cout << "Wrong choice Please try again" << endl;
		std::cin >> choise;
	}
	if (choise == 1)
	{

		std::cout << "If you dont want to sort , select 0" << endl;
		std::cout << "If you want to sort by date, select 1" << endl;
		std::cout << "If you want to sort by price, select 2" << endl;
		std::cout << "If you want to sort by price and by date, select 3" << endl;
		std::cout << "If you want to just add to wish list, select 4" << endl;
		std::cin >> check;
		while (check > 4 || check < 0)
		{
			std::cout << "Wrong choice Please try again" << endl;
			std::cin >> check;
		}
		if (check == 0)
			Print_all_vacations(getAllPackeges(), PackegesfileSize());
		if (check == 1)
			Print_all_vacations(Sort_by_date(getAllPackeges(), PackegesfileSize()), PackegesfileSize());
		if (check == 2)
			Print_all_vacations(Sort_by_price(getAllPackeges(), PackegesfileSize()), PackegesfileSize());
		if (check == 3)
			Print_all_vacations(Sort_by_date(Sort_by_price(getAllPackeges(), PackegesfileSize()), PackegesfileSize()), PackegesfileSize());
		std::cout << "Enter the package number you selected" << endl;
		std::cin >> Serial_number_selected;//בדיקה שנבחר מס סידורי קיים
		check2 = searchPackegeBySerialNumber(Serial_number_selected);
		while (check2 == -1)
		{
			std::cout << "Wrong choice Please try again" << endl;
			std::cin >> Serial_number_selected;
			check2 = searchPackegeBySerialNumber(Serial_number_selected);
		}
		if (check == 4)
		{
			std::cout << "enter user name" << endl;
			std::cin >> user_name;
			customer = Find_customer(user_name);// לבדוק מה קורה אם חוזר 0 זה בעיה
			AddToWishList(customer, Serial_number_selected);
		}
		else
		{
			UpdatePackegeStatus(1,Serial_number_selected);
			Order_vacation(Serial_number_selected);
		}
	}
	if (choise == 2)
		Package_filtering();
	if (choise == 3)
		return;// חזרה למסך הראשי של סוכן\לקוח
}


// Wish list
static void Wish_list(string user_name)
{
	bool check = false;
	int choise, serial_number;
	Client temp = Find_customer(user_name);// לבדוק מה קורה אם חוזר 0 זה בעיה
	cout << "The packages that you liked: " << endl;
	PrintWishList(temp);
	cout << "If you want to place an order Select 1, To return to the main menu, press 0" << endl;
	cin >> choise;
	while (choise < 0 || choise > 1)
	{
		cout << "Wrong choice Please try again" << endl;
		cin >> choise;
	}
	if (choise == 1)
	{
		cout << "enter seria number" << endl;
		cin >> serial_number;
		while (!check)
		{
			for (int i = 0; i < 20; i++)
			{
				if (temp.wish_list[i] == serial_number)
					check = true;
			}
			if (check)
				Order_vacation(serial_number);
			else
				cout << "the serial number not found in wish list" << endl;
		}
	}
	if (choise == 0)
		return;
}



static void Masseges(string user_name)
{
	Client* customer = Find_customer2(user_name);// לבדוק מה קורה אם חוזר 0 זה בעיה
	int choise;
	cout << "To contact us, press 1 " << endl;
	cin >> choise;
	if (choise == 1)
	{
		for (int i = 9; i > 0; i--)
		{
			customer->message_list[i] = customer->message_list[i - 1];
		}
		cout << "enter title: " << endl;
		cin >> customer->message_list[0].title;
		cout << "enter content: " << endl;
		cin >> customer->message_list[0].content;
		cout << "enter date:\n day: \n month:\n year: \n" << endl;
		cin >> customer->message_list[0].sending_date.day >> customer->message_list[0].sending_date.month >> customer->message_list[0].sending_date.year;
	}
	cout << "My Masseges" << endl;
	int i = 0;
	bool check = false;
	while (!check)
	{
		if (customer->message_list[i].content[0] != '0')
		{
			//Print_All_Message(customer->massages_list[i]);
			printMassege(customer->message_list[i]);
			i++;
		}
		else
			check = true;
	}
}




/////////// HOME PAGE OF PROGRAM /////////////
static void home_page() {

	std::cout << "#############################################################" << endl;
	std::cout << "#                 Welcome to Harel Tours                    #" << endl;
	std::cout << "#                    _                                      #" << endl;
	std::cout << "#                  -=\\`\\                                    #" << endl;
	std::cout << "#              |\\ ____\\_\\___                                #" << endl;
	std::cout << "#            -=\\c`_________ _`)                             #" << endl;
	std::cout << "#               `~~~~~/ /~~`\                                #" << endl;
	std::cout << "#                 -==/ /                                    #" << endl;
	std::cout << "#                   '-'                                     #" << endl;
	std::cout << "#                  _  _                                     #" << endl;
	std::cout << "#                 ( `   )_                                  #" << endl;
	std::cout << "#                (    )    `)                               #" << endl;
	std::cout << "#              (_   (_ .  _) _)                             #" << endl;
	std::cout << "#                                             _             #" << endl;
	std::cout << "#                                            (  )           #" << endl;
	std::cout << "#                                          ( `  ) . )       #" << endl;
	std::cout << "#           Hotel                         (_, _(  ,_)_)     #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#         |_______|                                         #" << endl;
	std::cout << "#############################################################" << endl;
	main_menu();
}
/////////// MAIN_MENU OF PROGRAM /////////////
static void main_menu()
{
	int choice;
	do
	{
		std::cout << "Hello, Would you like to login(register inside login) in or register?" "\n"
			"[1] Login as client" "\n"
			"[2] Login as agent" "\n"
			"[3] Exit""\n";
		std::cout << "Enter your choise:";
		std::cin >> choice;
		switch (choice)
		{
		case 1:
			login_as_client();
			break;
		case 2:
			//login_as_agent();
			break;
		case 3:
			exit(1);
			break;
		}
	} while (true);
}
/////////// CHOOSE LOGIN AS CLIENT ( 4 OPTIONS :1-LOGIN 2-REGISTER 3-GO BACK TO MAIN MENU /////////////
static void login_as_client()
{
	int choise;
	do
	{
		std::cout << "For login press 1 ""\n"
			"For register press 2""\n"
			"return to home page 3""\n"
			"Enter ur choise:";
		std::cin >> choise;
		switch (choise)
		{
		case 1:
			login_after_chose_login_as_client();
			break;
		case 2:
			register_user();
			break;
		case 3:
			main_menu();
			break;
		}
	} while (true);
}
/////////// LOGIN AS CLIENT /////////////
static void login_after_chose_login_as_client()
{
	Client* Customer_Information = getAllClients();
	string username = get_username();
	string password = get_password();
	const char* username1 = username.c_str();
	const char* password1 = password.c_str();
	int size_of_users = ClientsfileSize();
	bool keep_trying = true;

	for (int i = 0; i < size_of_users; ++i)
	{

		if (strcmp(Customer_Information[i].user_name, username1) == 0)
		{
			while (keep_trying)
			{
				if (strcmp(Customer_Information[i].password, password1) == 0)
				{
					client_menu(username);
				}
				else
				{
					std::cout << "Incorrect password do you want to re-enter the password? 0-No , 1-Yes " << endl;
					std::cin >> keep_trying;
					if (keep_trying)
					{
						password = get_password();
						password1 = password.c_str();
					}
				}
			}
		}
	}
	std::cout << "User hasn't found""\n";
	main_menu();
}
/////////// SHOW CLIENT MENU : 1-FIND_VACTION 2-ORDER STATUS 3-WISH_LIST 4-MESSAGES 5 HOME PAGE 6 EXIT/////////////
static void client_menu(string username) {
	int choice;
	do
	{
		std::cout <<
			"[1] Find a vaction" "\n"
			"[2] Order status" "\n"
			"[3] Wish list" "\n"
			"[4] Messages""\n"
			"[5] Home page(You will have to reconnect)""\n"
			"[6] Exit" "\n";

		std::cout << "Enter ur choise:";
		std::cin >> choice;
		switch (choice)
		{
		case 1:
			Find_vacation();
			break;
		case 2:
			Order_status(username);
			break;
		case 3:
			Wish_list(username);
			break;
		case 4:
			Masseges(username);
			break;
		case 5:
			home_page();
			break;
		case 6:
			exit(0);
			break;
		}
	} while (true);
};
/////////// REGISTER NEW CLIENT IF SUCCSESS SEND TO LOGIN ELSE PRINT FAILED AND RETURN TO HOME PAGE /////////////
static void register_user()
{
	std::string username;
	bool keep_trying = true;
	while (keep_trying)
	{
		username = get_username();
		if (Check_if_user_name_exists(username)) //// if user name existed, return false
		{
			keep_trying = false;
		}
		else
		{
			std::cout << "name is already used , want to try another name?0-No ,1-Yes:";
			std::cin >> keep_trying;
			if (keep_trying == 0)
			{
				home_page();
			}
		}
	}

	std::string password = get_password();
	std::string mail = get_mail();

	const char* username1 = username.c_str();
	const char* password1 = password.c_str();
	const char* mail1 = mail.c_str();

	Client new_acc = creatNewClient(username1, password1, mail1);   ///////////// createNewClient return clint
	if (setClientToDB(new_acc))
	{
		std::cout << "create has succeed""\n";
		login_after_chose_login_as_client();
	}
	else
	{
		std::cout << "create hasn't succeed , try again later""\n";
		home_page();
	}
}
/////////// IF USER EXIST RETURN FALSE ELSE RETURN TRUE /////////////
static bool Check_if_user_name_exists(string user_name)
{
	Client* db_all_clients = getAllClients();
	int size_of_all_clients = ClientsfileSize();
	const char* username1 = user_name.c_str();
	bool keep_trying = true;
	for (int i = 0; i < size_of_all_clients; ++i)
	{
		if (strcmp(db_all_clients[i].user_name, username1) == 0)
		{
			return false;
		}
	}
	return true;
}


template <typename T>
static T get_input(const std::string& strQuery)
{
	std::cout << strQuery << "\n> ";
	T out = T();

	while (!(std::cin >> out)) {
		std::cin.clear();
		std::cin.ignore(std::numeric_limits <std::streamsize>::max(), '\n');
		std::cout << "Error!" "\n";
		std::cout << strQuery << "\n> ";
	}

	return out;
}

/////////// RETURN PASSWORD ,CONDITION UP TO 8 CHARACTERS /////////////
static std::string get_password()
{

	std::string password1 = get_input <std::string>("Please enter your password.");
	while (password1.size() >= 8)
	{
		std::cout << "Error! Password up to 8 characters." "\n";
		password1 = get_input <std::string>("Please enter your password.");
	}
	std::string password2 = get_input <std::string>("Please re-enter your password.");

	while (password1 != password2) {
		std::cout << "Error! Passwords do not match." "\n";
		password1 = get_input <std::string>("Please enter your password.");
		password2 = get_input <std::string>("Please re-enter your password.");
	}

	return password1;
}
/////////// RETURN NAME UP TO 100 CHARACTERS /////////////
static std::string get_username()
{
	std::string username = get_input <std::string>("Please enter a username.");
	while (username.size() >= 100)
	{
		std::cout << "Error! username should be up to 100 characters." "\n";
		username = get_input <std::string>("Please enter a username.");
	}
	return username;
}
/////////// RETURN MAIL ONLY IF HE VALID  /////////////
static std::string get_mail()
{
	string mail;
	std::cout << "Enter your Email-Id:";
	std::cin >> mail;
	bool flag = true;
	while (flag)
	{
		while (mail.size() >= 20 && (!(Email_check(mail))))
		{
			std::cout << "Error! mail should be up to 20 characters." "\n";
			mail = get_input <std::string>("Please enter a username.");
		}

		while (!(Email_check(mail)))
		{
			std::cout << "bad email , try again:";
			std::cin >> mail;
		}
		if (mail.size() <= 20 && Email_check(mail))
			return mail;
	}
	return "";
}
/////////// CHECK IF MAIL IS VALID , IF ITS OK RETURN TRUE ELSE FALSE   /////////////
static bool Email_check(string email)
{
	const regex pattern("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
	return regex_match(email, pattern);
}






///////////login_as_agent /////////////
void login_as_agent()
{
	int check_what_returns_from_CheckingValidityAgentDetials;
	string username = get_username();
	string password = get_password();
	const char* username1 = username.c_str();
	const char* password1 = password.c_str();
	
	check_what_returns_from_CheckingValidityAgentDetials = CheckingValidityAgentDetials(username1, password1);
	if (check_what_returns_from_CheckingValidityAgentDetials == -2)
		cout << "You are not registered in the system, contact with ur work manager ""\n";
	if (check_what_returns_from_CheckingValidityAgentDetials == -1)
		cout << " password is incorrect ""\n";
	if (check_what_returns_from_CheckingValidityAgentDetials == 0)
		agent_menu();
	if (check_what_returns_from_CheckingValidityAgentDetials == -3)
			cout << "file opening failed ""\n";
			
	home_page();

}



///////////NOT FINISH /////////////
/*

void agent_menu() {
	int choice;

	do
	{
		std::cout <<
			"[1] package management" "\n"
			"[2] Order management" "\n"
			"[3] Messages" "\n"
			"[4] Home page(You will have to reconnect)""\n"
			"[5] Exit" "\n";
		std::cout << "Enter ur choise:";
		std::cin >> choice;
		switch (choice)
		{
		case 1:
			package_management();
			break;
		case 2:
			Order_management();
			break;
		case 3:
			messages();
			break;
		case 4:
			home_page();
			break;
		case 5:
			exit(0);
			break;
		}
	} while (true);
};
*/




int main()
{
	home_page();
	return 0;
}


